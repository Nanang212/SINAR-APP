generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  password        String
  category_id     Int?
  name_mentri     String?
  contact_person  String?
  filepath        String?
  original_name   String?
  created_at      DateTime         @default(now())
  created_by      Int?
  is_active       Boolean          @default(true)
  role_id         Int
  updated_at      DateTime         @updatedAt
  updated_by      Int?
  username        String           @unique
  documents       Document[]       @relation("UploadedDocuments")
  documentReports DocumentReport[]
  category        Kategori?        @relation(fields: [category_id], references: [id])
  role            Role             @relation(fields: [role_id], references: [id])
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  created_by Int?
  updated_at DateTime @updatedAt
  updated_by Int?
  users      User[]
}

model Kategori {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  is_active  Boolean    @default(true)
  created_at DateTime   @default(now())
  created_by Int?
  updated_at DateTime   @updatedAt
  updated_by Int?
  users      User[]
  documents  Document[] @relation("DocumentKategori")
}

model Document {
  id            Int              @id @default(autoincrement())
  filename      String
  url           String?
  uploaded_at   DateTime         @default(now())
  uploaded_by   Int
  is_active     Boolean          @default(true)
  createdBy     String           @default("system")
  updatedBy     String           @default("system")
  original_name String
  is_downloaded Boolean          @default(false)
  title         String?
  remark        String?
  uploader      User             @relation("UploadedDocuments", fields: [uploaded_by], references: [id])
  reports       DocumentReport[]
  kategori      Kategori[]       @relation("DocumentKategori")
}

model DocumentReport {
  id            Int       @id @default(autoincrement())
  document_id   Int
  user_id       Int
  content       String?
  description   String?
  created_at    DateTime  @default(now())
  created_by    Int?
  updated_at    DateTime  @updatedAt
  updated_by    Int?
  original_name String?
  downloaded_at DateTime?
  is_downloaded Boolean   @default(false)
  type          String
  document      Document  @relation(fields: [document_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])
}
